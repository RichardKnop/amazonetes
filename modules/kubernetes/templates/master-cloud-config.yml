#cloud-config

hostname: "${hostname}"

write_files:
  - path: /etc/ssl/certs/ca.pem
    permissions: 0644
    encoding: base64
    content: |
      ${ca_cert}
  - path: /etc/kubernetes/ssl/ca.pem
    permissions: 0644
    encoding: base64
    content: |
      ${ca_cert}
  - path: /etc/kubernetes/ssl/master-key.pem
    permissions: 0644
    encoding: base64
    content: |
      ${master_key}
  - path: /etc/kubernetes/ssl/master.pem
    permissions: 0644
    encoding: base64
    content: |
      ${master_cert}
  - path: /etc/profile.d/etcd-envvars.sh
    permissions: 0644
    content: |
      # for etcdctl
      export ETCDCTL_PEERS=${etcd_endpoints}
      export ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem
      export ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/master.pem
      export ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/master-key.pem
  - path: /etc/kubernetes/manifests/kube-apiserver.yaml
    permissions: 0644
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: quay.io/coreos/hyperkube:${kubernetes_version}
          command:
          - /hyperkube
          - apiserver
          - --bind-address=0.0.0.0
          - --etcd-servers=${etcd_endpoints}
          - --allow-privileged=true
          - --service-cluster-ip-range=${service_ip_range}
          - --secure-port=443
          - --advertise-address=$private_ipv4
          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota
          - --tls-cert-file=/etc/kubernetes/ssl/master.pem
          - --tls-private-key-file=/etc/kubernetes/ssl/master-key.pem
          - --client-ca-file=/etc/kubernetes/ssl/ca.pem
          - --service-account-key-file=/etc/kubernetes/ssl/master-key.pem
          - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/networkpolicies=true
          ports:
          - containerPort: 443
            hostPort: 443
            name: https
          - containerPort: 8080
            hostPort: 8080
            name: local
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    permissions: 0644
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: quay.io/coreos/hyperkube:${kubernetes_version}
          command:
          - /hyperkube
          - proxy
          - --master=http://127.0.0.1:8080
          - --proxy-mode=iptables
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
  - path: /etc/kubernetes/manifests/kube-controller-manager.yaml
    permissions: 0644
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller-manager
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-controller-manager
          image: quay.io/coreos/hyperkube:${kubernetes_version}
          command:
          - /hyperkube
          - controller-manager
          - --master=http://127.0.0.1:8080
          - --leader-elect=true
          - --service-account-private-key-file=/etc/kubernetes/ssl/master-key.pem
          - --root-ca-file=/etc/kubernetes/ssl/ca.pem
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10252
            initialDelaySeconds: 15
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
  - path: /etc/kubernetes/manifests/kube-scheduler.yaml
    permissions: 0644
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-scheduler
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-scheduler
          image: quay.io/coreos/hyperkube:${kubernetes_version}
          command:
          - /hyperkube
          - scheduler
          - --master=http://127.0.0.1:8080
          - --leader-elect=true
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
            timeoutSeconds: 1

coreos:
  update:
    reboot-strategy: off

  flannel:
    ip_masq: true
    interface: "$private_ipv4"
    etcd_endpoints: "${etcd_endpoints}"
    etcd_cafile: /etc/kubernetes/ssl/ca.pem
    etcd_certfile: /etc/kubernetes/ssl/master.pem
    etcd_keyfile: /etc/kubernetes/ssl/master-key.pem

  units:
    - name: update-ca-certificates.service
      command: start
      content: |
        [Unit]
        Description=Updateds CA certificates
        Before=docker.service
        [Service]
        Type=oneshot
        ExecStart=/usr/sbin/update-ca-certificates
        [Install]
        WantedBy=multi-user.target
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            ExecStartPre=/usr/bin/etcdctl --endpoints ${etcd_endpoints} \
             --ca-file /etc/kubernetes/ssl/ca.pem \
             --cert-file /etc/kubernetes/ssl/master.pem \
             --key-file /etc/kubernetes/ssl/master-key.pem \
             mk /coreos.com/network/config '{"Network":"${pod_network}", "Backend": {"Type": "vxlan"}}'
    - name: docker.service
      command: start
      drop-ins:
        - name: "10-docker0.conf"
          content: |
            [Service]
            Environment="DOCKER_OPTS=--bip=172.17.0.1/24 --fixed-cidr=172.17.0.0/24"
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            # making sure that flanneld finished startup, otherwise containers
            # won't land in flannel's network...
            Requires=flanneld.service
            After=flanneld.service
            Restart=Always
    - name: kubelet.service
      command: start
      content: |
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers

        Environment=KUBELET_VERSION=${kubernetes_version}
        Environment="RKT_OPTS=--volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log \
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf"

        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --kubeconfig=http://127.0.0.1:8080 \
          --network-plugin-dir=/etc/kubernetes/cni/net.d \
          --network-plugin=${network_plugin} \
          --register-schedulable=false \
          --allow-privileged=true \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --hostname-override=$private_ipv4 \
          --cluster-dns=${dns_service_ip} \
          --cluster-domain=${cluster_domain}
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target

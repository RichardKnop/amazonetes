#cloud-config

hostname: "${hostname}"

write_files:
  - path: /etc/ssl/certs/ca.pem
    permissions: 0644
    encoding: base64
    content: |
      ${ca_cert}
  - path: /etc/kubernetes/ssl/ca.pem
    permissions: 0644
    encoding: base64
    content: |
      ${ca_cert}
  - path: /etc/kubernetes/ssl/worker-key.pem
    permissions: 0644
    encoding: base64
    content: |
      ${worker_key}
  - path: /etc/kubernetes/ssl/worker.pem
    permissions: 0644
    encoding: base64
    content: |
      ${worker_cert}
  - path: /etc/profile.d/etcd-envvars.sh
    permissions: 0644
    content: |
      # for etcdctl
      export ETCDCTL_PEERS=${etcd_endpoints}
      export ETCDCTL_CA_FILE=/etc/kubernetes/ssl/ca.pem
      export ETCDCTL_CERT_FILE=/etc/kubernetes/ssl/worker.pem
      export ETCDCTL_KEY_FILE=/etc/kubernetes/ssl/worker-key.pem

coreos:
  update:
    reboot-strategy: off

  flannel:
    ip_masq: true
    interface: "$private_ipv4"
    etcd_endpoints: "${etcd_endpoints}"
    etcd_cafile: /etc/kubernetes/ssl/ca.pem
    etcd_certfile: /etc/kubernetes/ssl/worker.pem
    etcd_keyfile: /etc/kubernetes/ssl/worker-key.pem

  units:
    - name: update-ca-certificates.service
      command: start
      content: |
        [Unit]
        Description=Updateds CA certificates
        Before=docker.service
        [Service]
        Type=oneshot
        ExecStart=/usr/sbin/update-ca-certificates
        [Install]
        WantedBy=multi-user.target
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            ExecStartPre=/usr/bin/etcdctl --endpoints ${etcd_endpoints} \
             --ca-file /etc/kubernetes/ssl/ca.pem \
             --cert-file /etc/kubernetes/ssl/master.pem \
             --key-file /etc/kubernetes/ssl/master-key.pem \
             mk /coreos.com/network/config '{"Network":"${pod_network}", "Backend": {"Type": "vxlan"}}'
    - name: docker.service
      command: start
      drop-ins:
        - name: "10-docker0.conf"
          content: |
            [Service]
            Environment="DOCKER_OPTS=--bip=172.17.0.1/24 --fixed-cidr=172.17.0.0/24"
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            # making sure that flanneld finished startup, otherwise containers
            # won't land in flannel's network...
            Requires=flanneld.service
            After=flanneld.service
            Restart=Always
    - name: kubelet.service
      command: start
      content: |
        [Service]
        Environment=KUBELET_VERSION=${kubernetes_version}
        Environment="RKT_OPTS=--volume=resolv,kind=host,source=/etc/resolv.conf --mount volume=resolv,target=/etc/resolv.conf"
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=https://${master_host} \
          --network-plugin-dir=/etc/kubernetes/cni/net.d \
          --network-plugin=${network_plugin} \
          --register-node=true \
          --allow-privileged=true \
          --config=/etc/kubernetes/manifests \
          --cluster-dns=${dns_service_ip} \
          --cluster-domain=${cluster_domain} \
          --kubeconfig=/etc/kubernetes/worker-kubeconfig.yaml \
          --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
          --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
